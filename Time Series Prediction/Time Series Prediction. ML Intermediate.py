# -*- coding: utf-8 -*-
"""Adil Latif Habibi. Dcd.MLInter.SubmissionII.TimeSeries.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oeuZaDLiQWZfMqdyCzhowm9oL284RoQ9

## *1. Import semua library yang dibutuhkan*
"""

import pandas as pd
import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from keras.preprocessing.sequence import TimeseriesGenerator
from keras.layers import Dense, LSTM

"""##*2. Lakukan pengecekan data meliputi info dataframe, sampel dataset, dan pengecekan jika ada nilai yang kosong*"""

df = pd.read_csv('prices.csv')
print(df.info())
print('='*30)
print(df.head(2), df.tail(2))
print('='*30)
print(df.isnull().sum())

"""##*3. Filter dataframe, ambil kolom yang hanya diperlukan saja untuk keperluan kita, lakukan pengecekan*"""

df = df[['date','symbol','close']]
df.head(1)

df = df[(df.symbol=='AMZN')]
df

del df['symbol']
df.head(1)

"""##*4. Penamaan kembali (rename), terhadap kolom - kolom agar memudahkan pemrosesan data*"""

df.rename(columns={'date' : 'Date','close': 'Close Price'},inplace=True)
df.head(1)

"""##*5. Membuat duplikat dataframe, digunakan untuk indexing tahun dan agar dataframe asli tidak terganggu*"""

ndf = df
ndf['Date'] = pd.to_datetime(ndf['Date'])
ndf.set_index('Date',inplace = True)
ndf.index

ndf['Date']= ndf.index.year
ndf.head(1)

plt.figure(figsize=(9,4))
sns.lineplot(x = "Date" , y = "Close Price",data=ndf)
plt.show()

plt.figure(figsize=(15,5))
plt.plot(df['Close Price'])
plt.title('Amazon Close Price Stock History From 2010 - 2016 ', fontsize=20)
plt.xlabel('Year', fontsize= 18)
plt.ylabel('Close Price', fontsize=18)
plt.legend(['Close Price'],loc='upper left')
plt.show()

date = df['Date'].values
close_price  = df['Close Price'].values
df = df.values
     
plt.figure(figsize=(15,5))
plt.plot(date, close_price)
plt.title('Amazon Stock Price History from 2010-2016',
              fontsize=20);

train, test = train_test_split(df, test_size=0.2, shuffle=False)

"""## *6. Proses Normalisasi Data*"""

min_max_scaler = MinMaxScaler()
train_scale = min_max_scaler.fit_transform(train.reshape(-1,1))
test_scale = min_max_scaler.fit_transform(test.reshape(-1,1))
train_scale, test_scale

"""##*7. Membagi / split dataframe menjadi data training dan data testing*"""

train_size = int(len(close_price) * 0.8)
test_size = len(date) - train_size
train, test = df[0:train_size], df[train_size:len(df)]
print(len(train),len(test))

"""##*8. Gunakan TimeSeriesGenerator dapat membantu memudahkan pemrosesan model*
The Keras deep learning library provides the TimeseriesGenerator to automatically transform both univariate and multivariate time series data into samples, ready to train deep learning models.(https://machinelearningmastery.com/how-to-use-the-timeseriesgenerator-for-time-series-forecasting-in-keras/)
"""

look_back = 20
train_generator = TimeseriesGenerator(train_scale, train_scale, length=look_back, batch_size=30)     
test_generator = TimeseriesGenerator(test_scale, test_scale, length=look_back, batch_size=1)

"""##*9. Membangun arsitektur model menggunakan Sequential, 1 LSTM layer, dan 4 Dense layer*"""

model = tf.keras.models.Sequential([
  tf.keras.layers.LSTM(32, activation='relu', return_sequences=True, input_shape=(look_back, 1)),
  tf.keras.layers.Dense(128, activation='relu'),
  tf.keras.layers.Dense(64, activation='relu'),
  tf.keras.layers.Dense(32, activation='relu'),
  tf.keras.layers.Dense(1)
])

"""##*10. Kriteria pada submission ini mengharuskan model memiliki nilai MAE < 10% skala data. Berikut perintah untuk mengetahui nilai ambang batas (threshold) yang tepat untuk data yang digunakan., dan perbandingan menghitung mae dengan cara yang lain*"""

treshold_mae = (ndf['Close Price'].max() - ndf['Close Price'].min()) * 10/100
max = ndf['Close Price'].max()
min = ndf['Close Price'].min()
x = (max - min) * (10 / 100)
print(x, treshold_mae)

"""##*11. Penggunaan Callbacks untuk menghemat waktu pelatihan model ketika model sudah mencapai target yang diinginkan*"""

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('mae')< 0.005):
      self.model.stop_training = True
      print(f'\n Nilai MAE < 10% Skala Data')
callbacks = myCallback()

"""##*12. Setting Optimizer menggunakan Adam dengan learning_rate=0.001, berikut dengan pelatihan model, target mae < 0.005, epoch=40*"""

optimizer = tf.keras.optimizers.Adam(learning_rate=0.001)
model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])
history = model.fit_generator(train_generator, epochs=40, validation_data= test_generator, verbose=2, callbacks=[callbacks])

"""##*13. Plot loss dan akurasi pada saat training dan validation.*"""

plt.plot(history.history['mae'])
plt.plot(history.history['val_mae'])
plt.title('MAE')
plt.ylabel('mae')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model Loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()